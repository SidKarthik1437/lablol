1.

#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#define max 100000

void exch(int *p, int *q)
{
    int temp = *p;
    *p = *q;
    *q = temp;
}

void quicksort(int a[], int low, int high)
{
    int i, j, key, k;
    if (low >= high)
        return;
    key = low;
    i = low + 1;
    j = high;
    while (i <= j)
    {
        while (a[i] <= a[key])
            i = i + 1;
        while (a[j] > a[key])
            j = j - 1;
        if (i < j)
            exch(&a[i], &a[j]);
    }
    exch(&a[j], &a[key]);
    quicksort(a, low, j - 1);
    quicksort(a, j + 1, high);
}

int main()
{
    int n, y[max];
    int i;
    long counter;
    float seconds;
    clock_t start, finish;

    printf("Enter the no of elements to be sorted");
    scanf("%d", &n);

    for (i = 1; i <= n; i++)
    {
        y[i] = rand() % 100;
        printf("%d ", y[i]);
    }

    start = clock();
    counter = 0;
    while (clock() - start < 1000000)
    {
        counter++;
        quicksort(y, 1, n);
    }
    finish = clock();
    seconds = (finish - start) / CLOCKS_PER_SEC;
    printf("The sorted elements:");

    for (i = 1; i <= n; i++)
        printf("%d ", y[i]);
    printf(" best case and average case Time complexity= %f", (float)seconds / counter);
    // worst case Time complexity
    start = clock();
    counter = 0;
    while (clock() - start < 10000000)
    {
        counter++;
        quicksort(y, 1, n);
    }
    finish = clock();
    seconds = (finish - start) / CLOCKS_PER_SEC;
    printf(" worst case Time complexity= %f", (float)seconds / counter);
}


2. works 

#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#define max 100000

void merge(int arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;
    // Create temp arrays
    int L[n1], R[n2];
    // Copy data to temp array
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];
    // Merge the temp arrays
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    // Copy the remaining elements of L[]
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
    // Copy the remaining elements of R[]
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int l, int r)
{
    if (l < r)
    {
        // Finding mid element
        int m = l + (r - l) / 2;
        // Recursively sorting both the halves
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);

        // Merge the array
        merge(arr, l, m, r);
    }
}

void main()
{
    int n, y[max], right, left;
    int i, pos;
    long counter;
    float seconds;
    clock_t start, finish;
    printf("Enter the no of elements to be sorted");
    scanf("%d", &n);
    for (i = 1; i <= n; i++)
    {
        y[i] = rand() % 100;
        printf("%d ", y[i]);
    }
    start = clock();
    counter = 0;
    left = 1;
    right = n;
    while (clock() - start < 1000000)
    {
        counter++;
        mergeSort(y, left, right);
    }
    finish = clock();
    seconds = (finish - start) / CLOCKS_PER_SEC;
    printf(" The sorted elements:");
    for (i = 1; i <= n; i++)
        printf("%d ", y[i]);
    printf("Time complexity = %f", (float)seconds / counter);
}

2.not 

#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#define max 100000

void merge(int c[], int d[], int l, int m, int r)
{
    int i = l, j = m + 1, k = l;
    int q;
    while ((i <= m) && (j <= r))
        if (c[i] <= c[j])
            d[k++] = c[i++];
        else
            d[k++] = c[j++];
    if (i > m)
        for (q = j; q <= r; q++)
            d[k++] = c[q];
    else
        for (q = i; q <= m; q++)
            d[k++] = c[q];
}

void mergesort(int a[], int left, int right)
{
    int b[right], i;
    if (left < right)
    {
        int mid = (left + right) / 2;
        mergesort(a, left, mid);
        mergesort(a, mid + 1, right);
        merge(a, b, left, mid, right);
        for (i = left; i <= right; i++)
            a[i] = b[i];
    }
}

void main()
{
    int n, y[max], right, left;
    int i, pos;
    long counter;
    float seconds;
    clock_t start, finish;
    printf("Enter the no of elements to be sorted");
    scanf("%d", &n);
    for (i = 1; i <= n; i++)
    {
        y[i] = rand() % 100;
        printf("%d ", y[i]);
    }
    start = clock();
    counter = 0;
    left = 1;
    right = n;
    while (clock() - start < 1000000)
    {
        counter++;
        mergesort(y, left, right);
    }
    finish = clock();
    seconds = (finish - start) / CLOCKS_PER_SEC;
    printf(" The sorted elements:");
    for (i = 1; i <= n; i++)
        printf("%d ", y[i]);
    printf("Time complexity = %f", (float)seconds / counter);
}


3.

    #include<stdio.h>
int parent[10],t[10][3],a[10][10];
int find(int v)
{
	while(parent[v])
	v = parent[v];
	return v;
}
void union1(int i,int j)
{
	parent[j] = i;
}
void kruskal(int n)
{
	int k,i,j,u,v,min,r,c,sum=0;
	for(k=1;k<n;k++)
	{
		min = 999;
		for(i=1;i<n;i++)
			for(j=1;j<=n;j++)
			{
				if(i == j) continue;
				if(a[i][j] < min)
				{
					u = find(i);
					v = find(j);
					if(u != v)
						r = i, c = j, min = a[i][j];
				}
			 }
		 union1(r,find(c));
		 t[k][1] = r;
               t[k][2] = c;
		 sum += min;
	}
	printf("Cost of Spanning Tree = %d",sum);
	printf("Edges of Spanning Tree");
	for(i=1;i<n;i++)
		printf("%d â†’ %d",t[i][1],t[i][2]);
}
int main()
{
	int i,j,n;
	printf("Enter the number of vertices : ");
	scanf("%d",&n);
	printf("Enter the Adjacency Matrix(999 for NoEdge)");
	for(i=1;i<=n;i++)
		for(j=1;j<=n;j++)
			scanf("%d",&a[i][j]);
	kruskal(n);
	return 0;
}

4.

#include <stdio.h>
int i, j, k, v, u, n, ne = 1;
int visited[9], min, mincost = 0, cost[9][9];
int main()
{
    printf("Enter the number of vertices");
    scanf("%d", &n);
    printf("Enter the cost matrix");
    for (i = 1; i <= n; i++)
        for (j = 1; j <= n; j++)
        {
            scanf("%d", &cost[i][j]);
            if (cost[i][j] == 0)
                cost[i][j] = 999;
        }
    for (i = 2; i <= n; i++)
        visited[i] = 0;
    printf("the edges of the spanning tree are");
    visited[1] = 1;
    while (ne < n)
    {
        for (i = 1, min = 999; i <= n; i++)
        {
            for (j = 1; j <= n; j++)
            {
                if (cost[i][j] < min)
                    if (visited[i] == 0)
                        continue;
                    else
                    {
                        min = cost[i][j];
                        u = i;
                        v = j;
                    }
            }
        }
        if (visited[u] == 0 || visited[v] == 0)
        {
            printf("%dEdge(%d,%d)=%d", ne++, u, v, min);
            mincost += min;
            visited[v] = 1;
        }
        cost[u][v] = cost[v][u] = 999;
    }
    printf(" MINCOST=%d", mincost);
    return 0;
}


5.

#include <stdio.h>
int minimum(int, int);
int main()
{
    int cost[20][20], s[20], d[20];
    int source, n, mini, u;
    int i, j, v;
    printf("Enter the number of verticies : ");
    scanf("%d", &n);
    printf("Enter the weights of the graph");
    printf("If no connection enter 999 and for self loop enter 0");
    for (i = 1; i <= n; i++)
        for (j = 1; j <= n; j++)
            scanf("%d", &cost[i][j]);

    printf("Enter the source node : ");
    scanf("%d", &source);
    for (i = 1; i <= n; i++)
    {
        s[i] = 0;
        d[i] = cost[source][i];
    }
    s[source] = 1;
    for (i = 1; i <= n - 1; i++)
    {
        mini = 999;
        u = 0;
        for (j = 1; j <= n; j++)
            if (d[j] < mini && s[j] == 0)
            {
                mini = d[j];
                u = j;
            }
        s[u] = 1;
        for (v = 1; v <= n; v++)
            if (s[v] == 0)
                d[v] = minimum(d[v], d[u] + cost[u][v]);
    }
    for (i = 1; i <= n; i++)
        printf("Shortest Path From %d to %d is = %d", source, i, d[i]);
}
int minimum(int a, int b)
{
    return ((a < b) ? a : b);
}

6.
a.

#include <stdio.h>
#include <stdlib.h>
#define infinity 999
int min(int a, int b)
{
    return a < b ? a : b;
}

void floyd(int p[10][10], int n)
{
    int i, j, k;
    for (k = 1; k <= n; k++)
    {
        for (i = 1; i <= n; i++)
        {
            for (j = 1; j <= n; j++)
            {
                p[i][j] = min(p[i][j], p[i][k] + p[k][j]);
            }
        }
    }
}
void main()
{
    int a[10][10], i, j, n;
    printf("Enter the no of vertices:");
    scanf("%d", &n);
    printf("Enter the cost matrix 0 - forself loop and 999 - for no edges");
    for (i = 1; i <= n; i++)
        for (j = 1; j <= n; j++)
            scanf("%d", &a[i][j]);
    floyd(a, n);
    printf("The resultant path matrix is ");
    for (i = 1; i <= n; i++)
    {
        for (j = 1; j <= n; j++)
            printf("%d", a[i][j]);
        printf("");
    }
}

6.
b.

#include <stdio.h>
//#include<sys/time.h>
int p[20], w[20], v[20][20], n, m, i, j;
max(int a, int b)
{
    return a > b ? a : b;
}
knapsack(int n, int m, int w[20], int p[20], int v[20][20])
{
    for (i = 0; i <= n; i++)
        for (j = 0; j <= m; j++)
            if (i == 0 || j == 0)
                v[i][j] == 0;
            else if (w[i] > j)
                v[i][j] = v[i - 1][j];
            else
                v[i][j] = max(v[i - 1][j], v[i - 1][j - w[i]] + p[i]);
}
void optimal(int v[20][20], int w[20])
{
    for (i = 0; i <= n; i++)
    {
        for (j = 0; j <= m; j++)
            printf("%d", v[i][j]);
        printf("");
    }
    j = m;
    for (i = n; i >= 1; i--)
    {
        if (v[i][j] != v[i - 1][j])
        {
            printf("Object %d is selected ", i);
            j = j - w[i];
        }
        else
            printf("Object %d is not selected", i);
    }
}
int main()
{
    printf("Enter no. of objects : ");
    scanf("%d", &n);
    printf("Enter the weights of the objects");
    for (i = 1; i <= n; i++)
        scanf("%d", &w[i]);
    printf("Enter the profits of the objects");
    for (i = 1; i <= n; i++)
        scanf("%d", &p[i]);
    printf("Enter the capacity of the knapsack : ");
    scanf("%d", &m);
    knapsack(n, m, w, p, v);
    optimal(v, w);
    printf("The maximum profit is %d", v[n][m]);
    return 0;
}
